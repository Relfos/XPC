Unit XPC_PascalPreProcessor;

{$I terra.inc}

Interface
Uses XPC_Lexer, TERRA_Utils, TERRA_OS, TERRA_IO, TERRA_Error, TERRA_FileIO, TERRA_Collections;

Const
  MaxStates = 128;
  
%%
  
Type
  PascalPreProcessor = Class(CustomLexer)
    Protected            
        _Output:Stream;
        
        Procedure yyaction ( yyruleno : Integer ); Override;
      
        Function yywrap:Boolean; Override;

        Procedure CheckSourceNewline();
        
    Public
        Constructor Create(Source:Stream);
        Destructor Destroy; Override;

        Property CurrentLine:Integer Read yylineno;
        Property CurrentRow:Integer Read yycolno;
      
        Function Parse:Integer; Override;
        
        Property Output:Stream Read _Output;
  End;

Implementation

{ PascalPreProcessor }
Constructor PascalPreProcessor.Create(Source:Stream);
Begin
    _Output := MemoryStream.Create();
End;

Function PascalPreProcessor.yywrap:Boolean; 
Begin
    Case _CurrentState Of
    XCOMMENT1,
    XCOMMENT2:
        Begin 
            RaiseError('Unterminated comment');         
        End;
        
    XNOTDEF:        
        Begin 
            RaiseError('Unterminated ifdef');         
        End;
        
    End;
End;

// Emit newline if the current stream is the original src file
Procedure PascalPreProcessor.CheckSourceNewline();
Begin
    If (Not yymoreStreams()) Then
        _Output.WriteChars(NL);
End;

Procedure PascalPreProcessor.yyaction(yyruleno : Integer );
  (* local definitions: *)
%%
begin
  (* actions: *)
  case yyruleno of
%%
  end;
end(*yyaction*);

(* DFA table: *)
%%

Function PascalPreProcessor.Parse():Integer;
var yyn : Integer;

label start, scan, action;

begin

start:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  if yyfind(yyrule) then
    begin
      yyaction(yyrule);
      if yyreject then goto action;
    end
  else if not yydefault and yywrap then
    begin
      yyclear;
      return(0);
    end;

  if not yydone then goto start;

  Result := yyretval;

end(*yylex*);

End.