Unit XPC_PascalLexer;

{$I terra.inc}

Interface
Uses XPC_Lexer, TERRA_Utils, TERRA_OS, TERRA_IO, TERRA_Error, TERRA_FileIO, TERRA_Collections;

//    | LBRAC lvalue RBRAC                { $$ := $2; }

%%
  
Type
  PascalLexer = Class(CustomLexer)
    Protected
        Procedure yyaction(yyruleno:Integer); Override;   
        
    Public
        Function Parse():Integer; Override;
  End;

Implementation
Uses XPC_PascalParser;

Function GetDirectiveArg(directive:AnsiString):AnsiString;
Begin
  Result := Copy(Directive, 3, Length(directive)-3);
End;

Function ProcessIdentifier(id:AnsiString):Integer;
Begin
  //yylval := id;
	Result := PASCAL_IDENTIFIER;
End;

{ PascalLexer }
 
Procedure PascalLexer.yyaction(yyruleno:Integer); 
  // local definitions: 
%%

Begin
  // actions
  Case yyruleno Of
%%
  End;
End;

(* DFA table: *)
%%

Function PascalLexer.Parse():Integer;
Var 
    yyn : Integer;

label start, scan, action;

Begin

start:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  If yyfind(yyrule) Then
  Begin
    yyaction(yyrule);
    If yyreject Then 
        Goto Action;
  End Else 
  If Not yydefault And yywrap Then
  Begin
    yyclear();
    return(0);
  End;

  If (Not yydone) Then 
    Goto Start;

  Result := yyretval;

End;

End.